generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  profile   Profile?
  posts     Post[]
  likes     Like[]
  followers Follow[]   @relation("FollowersRelation")
  following Follow[]   @relation("FollowingRelation")

  @@index([username])
}

model Profile {
  id             String   @id @default(cuid())
  userId         String   @unique
  slug           String   @unique
  bio            String?
  avatarUrl      String?
  followersCount Int      @default(0)
  followingCount Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user           User     @relation(fields: [userId], references: [id])

  @@index([slug])
}

model Post {
  id           String   @id @default(cuid())
  userId       String
  title        String
  caption      String?
  modelUrl     String
  thumbnailUrl String
  slug         String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  likesCount   Int      @default(0)

  // Relations
  user         User     @relation(fields: [userId], references: [id])
  likes        Like[]

  @@index([userId])
  @@index([slug])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@index([userId])
  @@index([postId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower    User     @relation("FollowersRelation", fields: [followerId], references: [id])
  following   User     @relation("FollowingRelation", fields: [followingId], references: [id])

  @@index([followerId])
  @@index([followingId])
}








// Your existing models (keeping them as-is)
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
// model profile {
//   id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   user_id    String    @unique(map: "unique_user_id") @default(dbgenerated("(auth.jwt() ->> 'sub'::text)"))
//   avatar_url String?
//   created_at DateTime? @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  
//   // Relations to new ScanXR tables
//   user_profile UserProfile?
//   posts        Post[]
//   likes        Like[]
//   comments     Comment[]
//   followers    Follow[] @relation("ProfileFollowers")
//   following    Follow[] @relation("ProfileFollowing")
// }

// /// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
// model tasks {
//   id      Int    @id @default(autoincrement())
//   name    String
//   user_id String @default(dbgenerated("(auth.jwt() ->> 'sub'::text)"))
// }

// // NEW SCANXR MODELS

// /// Extended user profile for ScanXR features - RLS enabled
// model UserProfile {
//   id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   profile_id    String  @unique @db.Uuid
//   user_id       String  @default(dbgenerated("(auth.jwt() ->> 'sub'::text)"))
  
//   // ScanXR specific fields
//   username      String  @unique
//   display_name  String?
//   bio           String? @db.Text
  
//   // Social metrics (denormalized for performance)
//   follower_count  Int @default(0)
//   following_count Int @default(0)
//   post_count      Int @default(0)
  
//   // Settings
//   is_verified Boolean @default(false)
//   is_public   Boolean @default(true)
  
//   // Timestamps
//   created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
//   updated_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  
//   // Relations
//   profile profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  
//   @@map("user_profiles")
// }

// /// Posts containing 3D objects - RLS enabled  
// model Post {
//   id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   profile_id  String  @db.Uuid
//   user_id     String  @default(dbgenerated("(auth.jwt() ->> 'sub'::text)"))
  
//   // Content
//   caption     String? @db.Text
  
//   // 3D Object Storage URLs (Supabase Storage)
//   object_url     String  // 3D model file URL
//   qr_url         String? // QR code image URL
//   thumbnail_url  String? // Preview thumbnail URL
  
//   // Metadata
//   object_type    String? // File extension: glb, gltf, obj, etc.
//   object_size    Int?    // File size in bytes
//   model_name     String? // Original filename
  
//   // Social metrics (denormalized for performance)
//   like_count    Int @default(0)
//   comment_count Int @default(0)
//   view_count    Int @default(0)
//   share_count   Int @default(0)
  
//   // Visibility
//   is_public Boolean @default(true)
//   is_featured Boolean @default(false)
  
//   // Timestamps
//   created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
//   updated_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  
//   // Relations
//   profile  profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)
//   likes    Like[]
//   comments Comment[]
//   post_tags PostTag[]
  
//   @@map("posts")
//   @@index([profile_id])
//   @@index([created_at(sort: Desc)])
//   @@index([is_public, created_at(sort: Desc)])
// }

// /// Likes system - RLS enabled
// model Like {
//   id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   profile_id String @db.Uuid
//   post_id    String @db.Uuid
//   user_id    String @default(dbgenerated("(auth.jwt() ->> 'sub'::text)"))
  
//   created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  
//   // Relations
//   profile profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
//   post    Post    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  
//   @@unique([profile_id, post_id], name: "unique_user_post_like")
//   @@map("likes")
//   @@index([post_id])
// }

// /// Comments system - RLS enabled
// model Comment {
//   id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   profile_id String @db.Uuid
//   post_id    String @db.Uuid
//   user_id    String @default(dbgenerated("(auth.jwt() ->> 'sub'::text)"))
  
//   content String @db.Text
  
//   created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
//   updated_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  
//   // Relations
//   profile profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
//   post    Post    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  
//   @@map("comments")
//   @@index([post_id])
// }

// /// Follow relationships - RLS enabled
// model Follow {
//   id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   follower_id   String @db.Uuid  // Profile doing the following
//   following_id  String @db.Uuid  // Profile being followed
//   user_id       String @default(dbgenerated("(auth.jwt() ->> 'sub'::text)"))
  
//   created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  
//   // Relations
//   follower  profile @relation("ProfileFollowing", fields: [follower_id], references: [id], onDelete: Cascade)
//   following profile @relation("ProfileFollowers", fields: [following_id], references: [id], onDelete: Cascade)
  
//   @@unique([follower_id, following_id], name: "unique_follow_relationship")
//   @@map("follows")
//   @@index([follower_id])
//   @@index([following_id])
// }

// /// Tags for categorizing 3D objects
// model Tag {
//   id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   name        String @unique
//   slug        String @unique
//   description String? @db.Text
//   color       String? // Hex color for UI
  
//   // Usage metrics
//   post_count Int @default(0)
  
//   created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  
//   // Relations
//   post_tags PostTag[]
  
//   @@map("tags")
// }

// /// Many-to-many relationship between Posts and Tags
// model PostTag {
//   post_id String @db.Uuid
//   tag_id  String @db.Uuid
//   user_id String @default(dbgenerated("(auth.jwt() ->> 'sub'::text)"))
  
//   created_at DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  
//   // Relations
//   post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
//   tag  Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  
//   @@id([post_id, tag_id])
//   @@map("post_tags")
// }